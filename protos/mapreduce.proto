// Starter Proto file, feel free to change name of the file
syntax = "proto3";

package mapreduce;
option go_package = "./mapreducepb";

/*
********************************************
*                                          *
*       PING SERVICE                       *
********************************************
*/

// PingMessage defines a simple ping
message PingMessage {
  string greeting = 1;
}
/*
// Ping service defines the ping RPC
service Ping {
  rpc SayHello(PingMessage) returns (PingMessage) {}
}
*/
/*
********************************************
*                                          *
*       MAP REDUCE                         *
********************************************
*/

// Stores the file name and offsets 
message Shard {
  string file_name = 1;
  int64 start = 2;
  int64 end = 3;
}

// Master sends a TaskRequest to each worker.
// If the task is map, a file shared and relevant data is sent.
// If the task is reduce, temp_files generated by workers from the map task are sent.
message TaskRequest{
    repeated Shard file_shard = 1;
    string type = 2;
    int32 worker_id = 3;
    repeated string intermediate_file_path = 4;
    int32 map_task_id = 5;
    int32 reducer_task_id = 6;
}

// TaskResponse is the response structure for the worker replies to the master
message TaskResponse {
    // Status of the task
    string task_status = 1;

    // Locations of intermediate files.
    string temp_files = 2;
}

message ReduceMap {
  map<int32, string> values = 1;
}

// If map recompute from map itself
// If reduce start reduce phase from map.
message RecomputeRequest{
  string job_id = 1;
  string task_type = 2;
  map<int32, string> mapTask = 3;
  map<int32, string> reducemap = 4;
}

message RecomputResponse{
  string acknowlege = 1;
}

// AssignTask is the RPC call the master uses to assign tasks to 
// workers and hear back from them.
service Processor {
  rpc AssignTask(TaskRequest) returns (TaskResponse){}
  rpc SayHello(PingMessage) returns (PingMessage) {}
  rpc Recompute(RecomputeRequest) returns (RecomputResponse) {}
}
